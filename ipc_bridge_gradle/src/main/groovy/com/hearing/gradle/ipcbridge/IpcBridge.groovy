package com.hearing.gradle.ipcbridge

import com.hearing.gradle.ipcbridge.extension.BridgeExtension
import com.hearing.gradle.ipcbridge.extension.ProviderConfig
import groovy.xml.XmlUtil
import org.gradle.api.Plugin
import org.gradle.api.Project

class IpcBridge implements Plugin<Project> {
    private String srcPath
    private Project project

    @Override
    void apply(Project project) {
        this.project = project
        init()
        project.getExtensions().create("IpcBridge", BridgeExtension, project)
        project.afterEvaluate {
            doAfterEvaluate()
        }
    }

    private void init() {
        def sourceSetPath = "${project.buildDir}/bridge"
        srcPath = "${sourceSetPath}/com/hearing/ipcbridge"
        project.android.sourceSets {
            main {
                java.srcDir "${project.buildDir}/bridge"
            }
        }
    }

    private void ensurePath() {
        def sourceDir = new File(srcPath)
        if (sourceDir.exists()) {
            if (!sourceDir.isDirectory()) {
                sourceDir.delete()
                sourceDir.mkdirs()
            }
        } else {
            sourceDir.mkdirs()
        }
        println(">>>source path = ${srcPath}")
    }

    private void doAfterEvaluate() {
        project.android.applicationVariants.all { variant ->
            String variantName = variant.name.capitalize()
            println(">>>variantName = $variantName")
            def processManifestTask = project.tasks.getByName("process${variantName}Manifest")

            processManifestTask.doLast { pmt ->
                pmt.manifestOutputDirectory.getAsFileTree().getFiles().each { File f ->
                    if (f.getName().endsWith("AndroidManifest.xml")) {
                        ensurePath()

                        println(">>>manifestPath = ${f.getAbsolutePath()}")

                        def manifest = f.getText()
                        def xml = new XmlParser().parseText(manifest)
                        BridgeExtension extension = project.getExtensions().getByName("IpcBridge")
                        extension.providerConfigs.each { ProviderConfig provider ->
                            println(">>----------------------------------------<<")
                            println("provider = $provider")
                            xml.application[0].appendNode(
                                    "provider",
                                    ["android:name"               : "com.hearing.ipcbridge.${provider.name}",
                                     "android:authorities"        : provider.authorities,
                                     "android:grantUriPermissions": true,
                                     "android:process"            : provider.process,
                                     "android:exported"           : provider.exported]
                            )

                            def src = new File("$srcPath/${provider.name}.java")
                            if (src.exists()) {
                                println("java exists.")
                                src.delete()
                            }
                            src.createNewFile()
                            src.withWriter { writer ->
                                writer.write("package com.hearing.ipcbridge;\n\n")
                                writer.write("// Automatically generated by IpcBridge.\n")
                                writer.write("public class ${provider.name} extends BaseProvider {\n")
                                writer.write("}")
                            }
                        }

                        def serialize = XmlUtil.serialize(xml)
                        f.write(serialize)
                    }
                }
            }
        }
    }
}